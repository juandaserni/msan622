{
    "contents" : "library(shiny)\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(grid)\nlibrary(RColorBrewer)\n\n# Munging\ndata(movies)\nmovies <- subset(movies, budget > 0)\ngenre <- rep(NA, nrow(movies))\ncount <- rowSums(movies[, 18:24])\ngenre[which(count > 1)] = \"Mixed\"\ngenre[which(count < 1)] = \"None\"\ngenre[which(count == 1 & movies$Action == 1)] = \"Action\"\ngenre[which(count == 1 & movies$Animation == 1)] = \"Animation\"\ngenre[which(count == 1 & movies$Comedy == 1)] = \"Comedy\"\ngenre[which(count == 1 & movies$Drama == 1)] = \"Drama\"\ngenre[which(count == 1 & movies$Documentary == 1)] = \"Documentary\"\ngenre[which(count == 1 & movies$Romance == 1)] = \"Romance\"\ngenre[which(count == 1 & movies$Short == 1)] = \"Short\"\nmovies$genre <- factor(genre)\n\nmpaas <- levels(movies$mpaa)[levels(movies$mpaa) != '']\ngenres <- levels(movies$genre)\n\n# Themeing  \nlogspace <- function( d1, d2, n) exp(log(10)*seq(d1, d2, length.out=n))\nsupport <- logspace(0,8,9)\ncustom <- theme(text = element_text(size = 16, colour = \"gray\"), \n                axis.text.x = element_text(colour = \"gray\"), \n                axis.text.y = element_text(colour = \"gray\"),\n                axis.ticks = element_line(colour = 'gray'),\n                \n                title = element_text(vjust = 2),\n                axis.title.x = element_text(vjust = -1.25), \n                axis.title.y = element_text(vjust = -0.1),\n                \n                plot.background = element_blank(),\n                plot.margin = unit(c(1, 1, 1, 1), \"cm\"),\n                \n                panel.background = element_blank(),\n                panel.grid = element_blank(),\n                \n                line = element_line(colour = 'gray'),\n                axis.line = element_line(colour = 'gray'),\n                legend.position = 'right',\n                legend.title = element_blank(),\n                legend.background = element_blank(),\n                legend.key = element_blank())\n\nshinyServer(function(input, output) {\n  \n  local.movies <- movies\n  \n  # Build rating UI element\n  output$mpaa <- renderUI({\n    radioButtons('mpaa', 'MPAA Rating',\n                 choices = c('All', mpaas),\n                 selected = 'All')\n  })\n  \n  # Build genre UI element\n  output$genres <- renderUI({\n    checkboxGroupInput('genres', 'Genres', \n                       choices  = genres,\n                       selected = genres)\n  })\n  \n  # Adjust dataset based on UI inputs\n  getdata <- reactive({\n    \n    # Selection logic\n    if (input$mpaa != 'All' & length(input$genres) != 0) {\n      dataset <- subset(local.movies,\n                        mpaa == input$mpaa & genre %in% input$genres)\n      inactive <- subset(local.movies,\n                         mpaa != input$mpaa | ! genre %in% input$genres)\n    } else if (input$mpaa != 'All') {\n      dataset <- subset(local.movies,\n                        mpaa == input$mpaa)\n      inactive <- subset(local.movies,\n                         mpaa != input$mpaa)\n    } else if (length(input$genres) != 0) {\n      dataset <- subset(local.movies, \n                        genre %in% input$genres)\n      inactive <- subset(local.movies,\n                         ! genre %in% input$genres)\n    } else {\n      dataset <- local.movies\n      inactive <- data.frame()\n    }  \n    \n    # Return the active and inactive partitions of the data\n    current <- list(dataset, inactive)\n    names(current) <- c('dataset', 'inactive')\n    return(current)\n  })\n  \n  # Plot!\n  output$plot <- renderPlot({\n    \n    # Wait for UI controls to set\n    if(is.null(input$mpaa)) {\n      return()\n    }  \n    \n    # Adjust color\n    color <- c(brewer.pal(length(levels(local.movies$genre)), input$color_scheme), \"#FFFFFF\")\n    names(color) <- levels(local.movies$genre)\n    \n    # Get the data\n    inactive <- getdata()[['inactive']]\n    active <- getdata()[['dataset']]\n\n    # Plot inactive data, if any    \n    if (nrow(inactive) > 0) {\n      p <- ggplot(data = inactive,\n                  aes(x = budget, \n                      y = rating),\n                  colour = 'grey') + \n        geom_point(alpha = .05,\n                   size = 1 + (input$dot_size /3))\n    } else {\n      p <- ggplot()\n    }\n    \n    # Plot active data, if any\n    if (nrow(active) > 0 ) {\n    p <- p + geom_point(data = active,\n                        alpha = input$dot_alpha,\n                        size = 1 + (input$dot_size / 3),\n                        aes(x = budget,\n                            y = rating,\n                            colour = genre)) +\n      guides(colour = guide_legend(override.aes = list(shape = 15,\n                                                       size = 10)))\n    }\n    \n    # Add remaining plot layers, regardless of data \n    p <- p +\n        scale_x_log10(breaks=support,\n                      labels=dollar(support),\n                      limits=c(min(local.movies$budget, na.rm = T),\n                               max(local.movies$budget, na.rm = T))) +\n        scale_y_continuous(breaks=0:10,\n                           expand=c(0,0),\n                           limits=c(0,10.5)) +\n        scale_colour_manual(values=color) +\n        annotation_logticks(sides='b',\n                            colour = 'gray') +\n        xlab('Budget') + ylab('Average Rating') +\n        custom\n    \n    print(p)\n    \n  }, bg = 'transparent')\n  \n  # Include the selected raw data\n  output$table <- renderDataTable({\n    getdata()[['dataset']][,-7:-24]}, \n    options = list(sPaginationType = \"two_button\",\n                   sScrollY = \"400px\",\n                   bScrollCollapse = 'true'))\n  \n})",
    "created" : 1396594634461.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3893444653",
    "id" : "41F3D496",
    "lastKnownWriteTime" : 1396753967,
    "path" : "~/msan622/homework2/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}